generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// createdAt        DateTime           @default(now())
// updatedAt        DateTime           @default(now())
model Doctor {
  id               Int                @id @default(autoincrement())
  name             String
  crm              String
  speciality       String
  ExamSolicitation ExamSolicitation[]
}

model User {
  id               Int                @id @default(autoincrement())
  bithDate         DateTime
  name             String
  sex              String
  bloodType        BloodType          @relation(fields: [bloodTypeId], references: [id])
  bloodTypeId      Int
  medicalHistory   MedicalHistory[]
  medicalHistoryId Int
  medicines        Medicine[]
  allergies        Allergy[]
  ExamSolicitation ExamSolicitation[]
}

model BloodType {
  id   Int             @id @default(autoincrement())
  type BloodTypeEnum
  rh   BloodTypeRhEnum
  User User[]
}

model MedicalHistory {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  User        User?  @relation(fields: [userId], references: [id])
  userId      Int?
}

model Allergy {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  User        User?  @relation(fields: [userId], references: [id])
  userId      Int?
}

model Medicine {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  User        User?  @relation(fields: [userId], references: [id])
  userId      Int?
}

model ExamSolicitation {
  id       Int    @id @default(autoincrement())
  doctor   Doctor @relation(fields: [doctorId], references: [id])
  doctorId Int
  user     User   @relation(fields: [userId], references: [id])
  userId   Int
  exam     Exam   @relation(fields: [examId], references: [id])
  examId   Int
}

model Exam {
  id               Int                @id @default(autoincrement())
  realizationDate  DateTime
  resultDate       DateTime
  result           String
  info             ExamInfo           @relation(fields: [examInfoId], references: [id])
  examInfoId       Int
  ExamSolicitation ExamSolicitation[]
}

model ExamInfo {
  id             Int      @id @default(autoincrement())
  synonymy       String
  material       String
  conservation   String
  preparation    String
  method         String
  interfering    String
  normalValues   String
  interpretation String
  relatedExams   String[]
  Exam           Exam[]
}

enum SexEnum {
  masc
  fem
  other
}

enum BloodTypeEnum {
  A
  B
  AB
  O
}

enum BloodTypeRhEnum {
  positive
  negative
}
